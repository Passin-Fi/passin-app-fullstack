{
  "address": "G5SuNc9zcsxi2ANAy13XweXaczWxq2vzJCFz3pmVEqNJ",
  "metadata": {
    "name": "lazorkit",
    "version": "0.1.0",
    "spec": "0.1.0",
    "description": "Created with Anchor"
  },
  "docs": [
    "LazorKit: Enterprise Smart Wallet with WebAuthn Passkey Authentication",
    "",
    "LazorKit is a comprehensive smart wallet solution that enables secure, user-friendly",
    "transaction execution using WebAuthn passkey authentication. The program provides:",
    "",
    "- **Passkey-based Authentication**: Secure transaction signing using WebAuthn standards",
    "- **Policy-driven Security**: Configurable transaction validation through policy programs",
    "- **Chunked Transactions**: Support for large transactions via chunked execution",
    "- **Permission System**: Ephemeral key grants for enhanced user experience",
    "- **Vault Management**: Multi-slot fee distribution and SOL management",
    "- **Admin Controls**: Program configuration and policy program registration",
    "",
    "The program is designed for enterprise use cases requiring high security, scalability,",
    "and user experience while maintaining compatibility with existing Solana infrastructure."
  ],
  "instructions": [
    {
      "name": "add_policy_program",
      "docs": [
        "Register a new policy program in the whitelist",
        "",
        "Allows the program authority to add new policy programs to the registry.",
        "These policy programs can then be used by smart wallets for transaction",
        "validation and security enforcement."
      ],
      "discriminator": [172, 91, 65, 142, 231, 42, 251, 227],
      "accounts": [
        {
          "name": "authority",
          "writable": true,
          "signer": true,
          "relations": ["config"]
        },
        {
          "name": "config",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "policy_program_registry",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112, 111, 108, 105, 99, 121, 95, 114, 101, 103, 105, 115, 116,
                  114, 121
                ]
              }
            ]
          }
        },
        {
          "name": "new_policy_program"
        }
      ],
      "args": []
    },
    {
      "name": "call_policy",
      "docs": [
        "Execute policy program instructions",
        "",
        "Calls the policy program to perform operations like adding/removing devices",
        "or other policy-specific actions. Requires proper passkey authentication",
        "and validates the policy program is registered."
      ],
      "discriminator": [57, 50, 158, 108, 226, 148, 41, 221],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "config",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "smart_wallet",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet_config.wallet_id",
                "account": "SmartWalletConfig"
              }
            ]
          }
        },
        {
          "name": "smart_wallet_config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116, 95,
                  99, 111, 110, 102, 105, 103
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              }
            ]
          }
        },
        {
          "name": "referral",
          "writable": true
        },
        {
          "name": "lazorkit_vault",
          "docs": [
            "LazorKit vault (empty PDA that holds SOL) - random vault selected by client"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  108, 97, 122, 111, 114, 107, 105, 116, 95, 118, 97, 117, 108,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "args.vault_index"
              }
            ]
          }
        },
        {
          "name": "wallet_device"
        },
        {
          "name": "policy_program"
        },
        {
          "name": "policy_program_registry",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112, 111, 108, 105, 99, 121, 95, 114, 101, 103, 105, 115, 116,
                  114, 121
                ]
              }
            ]
          }
        },
        {
          "name": "ix_sysvar",
          "address": "Sysvar1nstructions1111111111111111111111111"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": {
              "name": "CallPolicyArgs"
            }
          }
        }
      ]
    },
    {
      "name": "change_policy",
      "docs": [
        "Change the policy program for a smart wallet",
        "",
        "Allows changing the policy program that governs a smart wallet's transaction",
        "validation rules. Requires proper passkey authentication and validates that",
        "the new policy program is registered in the whitelist."
      ],
      "discriminator": [105, 129, 139, 210, 10, 152, 183, 3],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "config",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "smart_wallet",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet_config.wallet_id",
                "account": "SmartWalletConfig"
              }
            ]
          }
        },
        {
          "name": "smart_wallet_config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116, 95,
                  99, 111, 110, 102, 105, 103
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              }
            ]
          }
        },
        {
          "name": "referral",
          "writable": true
        },
        {
          "name": "lazorkit_vault",
          "docs": [
            "LazorKit vault (empty PDA that holds SOL) - random vault selected by client"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  108, 97, 122, 111, 114, 107, 105, 116, 95, 118, 97, 117, 108,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "args.vault_index"
              }
            ]
          }
        },
        {
          "name": "wallet_device"
        },
        {
          "name": "old_policy_program"
        },
        {
          "name": "new_policy_program"
        },
        {
          "name": "policy_program_registry",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112, 111, 108, 105, 99, 121, 95, 114, 101, 103, 105, 115, 116,
                  114, 121
                ]
              }
            ]
          }
        },
        {
          "name": "ix_sysvar",
          "docs": ["CHECK"],
          "address": "Sysvar1nstructions1111111111111111111111111"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": {
              "name": "ChangePolicyArgs"
            }
          }
        }
      ]
    },
    {
      "name": "create_chunk",
      "docs": [
        "Create a chunk buffer for large transactions",
        "",
        "Creates a buffer for chunked transactions when the main execute transaction",
        "exceeds size limits. Splits large transactions into smaller, manageable",
        "chunks that can be processed separately while maintaining security."
      ],
      "discriminator": [83, 226, 15, 219, 9, 19, 186, 90],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "config",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "smart_wallet",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet_config.wallet_id",
                "account": "SmartWalletConfig"
              }
            ]
          }
        },
        {
          "name": "smart_wallet_config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116, 95,
                  99, 111, 110, 102, 105, 103
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              }
            ]
          }
        },
        {
          "name": "wallet_device",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  119, 97, 108, 108, 101, 116, 95, 100, 101, 118, 105, 99, 101
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              },
              {
                "kind": "arg",
                "path": "args.passkey_public_key.to_hashed_bytes(smart_wallet"
              }
            ]
          }
        },
        {
          "name": "policy_program_registry",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112, 111, 108, 105, 99, 121, 95, 114, 101, 103, 105, 115, 116,
                  114, 121
                ]
              }
            ]
          }
        },
        {
          "name": "policy_program",
          "docs": [
            "Policy program for optional policy enforcement at session creation"
          ]
        },
        {
          "name": "chunk",
          "docs": ["New transaction session account (rent payer: payer)"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 104, 117, 110, 107]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              },
              {
                "kind": "account",
                "path": "smart_wallet_config.last_nonce",
                "account": "SmartWalletConfig"
              }
            ]
          }
        },
        {
          "name": "ix_sysvar",
          "address": "Sysvar1nstructions1111111111111111111111111"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": {
              "name": "CreateChunkArgs"
            }
          }
        }
      ]
    },
    {
      "name": "create_smart_wallet",
      "docs": [
        "Create a new smart wallet with WebAuthn passkey authentication",
        "",
        "Creates a new smart wallet account with associated passkey device for secure",
        "authentication. The wallet is initialized with the specified policy program",
        "for transaction validation and can receive initial SOL funding."
      ],
      "discriminator": [129, 39, 235, 18, 132, 68, 203, 19],
      "accounts": [
        {
          "name": "payer",
          "docs": [
            "The account that pays for the wallet creation and initial SOL transfer"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "policy_program_registry",
          "docs": [
            "Policy program registry that validates the default policy program"
          ],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112, 111, 108, 105, 99, 121, 95, 114, 101, 103, 105, 115, 116,
                  114, 121
                ]
              }
            ]
          }
        },
        {
          "name": "smart_wallet",
          "docs": [
            "The smart wallet address PDA being created with the provided wallet ID"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116
                ]
              },
              {
                "kind": "arg",
                "path": "args.wallet_id"
              }
            ]
          }
        },
        {
          "name": "smart_wallet_config",
          "docs": [
            "Smart wallet data account that stores wallet state and configuration"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116, 95,
                  99, 111, 110, 102, 105, 103
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              }
            ]
          }
        },
        {
          "name": "wallet_device",
          "docs": [
            "Wallet device account that stores the passkey authentication data"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  119, 97, 108, 108, 101, 116, 95, 100, 101, 118, 105, 99, 101
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              },
              {
                "kind": "arg",
                "path": "args.passkey_public_key.to_hashed_bytes(smart_wallet"
              }
            ]
          }
        },
        {
          "name": "config",
          "docs": ["Program configuration account containing global settings"],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "default_policy_program",
          "docs": [
            "Default policy program that will govern this smart wallet's transactions"
          ]
        },
        {
          "name": "system_program",
          "docs": ["System program for account creation and SOL transfers"],
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": {
              "name": "CreateSmartWalletArgs"
            }
          }
        }
      ]
    },
    {
      "name": "execute",
      "docs": [
        "Execute a transaction through the smart wallet",
        "",
        "The main transaction execution function that validates the transaction through",
        "the policy program before executing the target program instruction. Supports",
        "complex multi-instruction transactions with proper authentication."
      ],
      "discriminator": [130, 221, 242, 154, 13, 193, 189, 29],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "smart_wallet",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet_config.wallet_id",
                "account": "SmartWalletConfig"
              }
            ]
          }
        },
        {
          "name": "smart_wallet_config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116, 95,
                  99, 111, 110, 102, 105, 103
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              }
            ]
          }
        },
        {
          "name": "referral",
          "writable": true
        },
        {
          "name": "lazorkit_vault",
          "docs": [
            "LazorKit vault (empty PDA that holds SOL) - random vault selected by client"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  108, 97, 122, 111, 114, 107, 105, 116, 95, 118, 97, 117, 108,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "args.vault_index"
              }
            ]
          }
        },
        {
          "name": "wallet_device"
        },
        {
          "name": "policy_program_registry",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112, 111, 108, 105, 99, 121, 95, 114, 101, 103, 105, 115, 116,
                  114, 121
                ]
              }
            ]
          }
        },
        {
          "name": "policy_program"
        },
        {
          "name": "cpi_program"
        },
        {
          "name": "config",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "ix_sysvar",
          "address": "Sysvar1nstructions1111111111111111111111111"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": {
              "name": "ExecuteArgs"
            }
          }
        }
      ]
    },
    {
      "name": "execute_chunk",
      "docs": [
        "Execute a chunk from the chunk buffer",
        "",
        "Executes a chunk from the previously created buffer. Used when the main",
        "execute transaction is too large and needs to be split into smaller,",
        "manageable pieces for processing."
      ],
      "discriminator": [106, 83, 113, 47, 89, 243, 39, 220],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "config",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "smart_wallet",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet_config.wallet_id",
                "account": "SmartWalletConfig"
              }
            ]
          }
        },
        {
          "name": "smart_wallet_config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116, 95,
                  99, 111, 110, 102, 105, 103
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              }
            ]
          }
        },
        {
          "name": "referral",
          "writable": true
        },
        {
          "name": "lazorkit_vault",
          "docs": [
            "LazorKit vault (empty PDA that holds SOL) - random vault selected by client"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  108, 97, 122, 111, 114, 107, 105, 116, 95, 118, 97, 117, 108,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "chunk.vault_index",
                "account": "Chunk"
              }
            ]
          }
        },
        {
          "name": "chunk",
          "docs": [
            "Transaction session to execute. Closed on success to refund rent."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 104, 117, 110, 107]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              },
              {
                "kind": "account",
                "path": "chunk.authorized_nonce",
                "account": "Chunk"
              }
            ]
          }
        },
        {
          "name": "session_refund",
          "writable": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "instruction_data_list",
          "type": {
            "vec": "bytes"
          }
        },
        {
          "name": "split_index",
          "type": "bytes"
        }
      ]
    },
    {
      "name": "execute_with_permission",
      "docs": [
        "Execute transactions using ephemeral permission",
        "",
        "Executes transactions using a previously granted ephemeral key, allowing",
        "multiple operations without repeated passkey authentication. Perfect for",
        "games or applications that require frequent interactions with the wallet."
      ],
      "discriminator": [213, 159, 47, 243, 150, 206, 78, 67],
      "accounts": [
        {
          "name": "fee_payer",
          "docs": ["Fee payer for the transaction (stored in authorization)"],
          "writable": true,
          "signer": true
        },
        {
          "name": "ephemeral_signer",
          "docs": ["Ephemeral key that can sign transactions (must be signer)"],
          "signer": true
        },
        {
          "name": "config",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "smart_wallet",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet_config.wallet_id",
                "account": "SmartWalletConfig"
              }
            ]
          }
        },
        {
          "name": "smart_wallet_config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116, 95,
                  99, 111, 110, 102, 105, 103
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              }
            ]
          }
        },
        {
          "name": "referral",
          "writable": true
        },
        {
          "name": "lazorkit_vault",
          "docs": [
            "LazorKit vault (empty PDA that holds SOL) - random vault selected by client"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  108, 97, 122, 111, 114, 107, 105, 116, 95, 118, 97, 117, 108,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "permission.vault_index",
                "account": "Permission"
              }
            ]
          }
        },
        {
          "name": "permission",
          "docs": [
            "Ephemeral authorization to execute. Closed on success to refund rent."
          ],
          "writable": true
        },
        {
          "name": "authorization_refund",
          "writable": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "instruction_data_list",
          "type": {
            "vec": "bytes"
          }
        },
        {
          "name": "split_index",
          "type": "bytes"
        }
      ]
    },
    {
      "name": "grant_permission",
      "docs": [
        "Grant ephemeral permission to a keypair",
        "",
        "Grants time-limited permission to an ephemeral keypair to interact with",
        "the smart wallet. Ideal for games or applications that need to perform",
        "multiple operations without repeatedly authenticating with passkey."
      ],
      "discriminator": [50, 6, 1, 242, 15, 73, 99, 164],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "config",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "smart_wallet",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet_config.wallet_id",
                "account": "SmartWalletConfig"
              }
            ]
          }
        },
        {
          "name": "smart_wallet_config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116, 95,
                  99, 111, 110, 102, 105, 103
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              }
            ]
          }
        },
        {
          "name": "wallet_device",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  119, 97, 108, 108, 101, 116, 95, 100, 101, 118, 105, 99, 101
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              },
              {
                "kind": "arg",
                "path": "args.passkey_public_key.to_hashed_bytes(smart_wallet"
              }
            ]
          }
        },
        {
          "name": "permission",
          "docs": ["New ephemeral authorization account (rent payer: payer)"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [112, 101, 114, 109, 105, 115, 115, 105, 111, 110]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              },
              {
                "kind": "arg",
                "path": "args.ephemeral_public_key"
              }
            ]
          }
        },
        {
          "name": "ix_sysvar",
          "address": "Sysvar1nstructions1111111111111111111111111"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": {
              "name": "GrantPermissionArgs"
            }
          }
        }
      ]
    },
    {
      "name": "initialize_program",
      "docs": [
        "Initialize the LazorKit program with essential configuration",
        "",
        "Sets up the program's initial state including the sequence tracker for transaction",
        "ordering and default configuration parameters. This must be called before any",
        "other operations can be performed."
      ],
      "discriminator": [176, 107, 205, 168, 24, 157, 175, 103],
      "accounts": [
        {
          "name": "signer",
          "docs": [
            "The signer of the transaction, who will be the initial authority."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "config",
          "docs": ["The program's configuration account."],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "policy_program_registry",
          "docs": [
            "The registry of policy programs that can be used with smart wallets."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112, 111, 108, 105, 99, 121, 95, 114, 101, 103, 105, 115, 116,
                  114, 121
                ]
              }
            ]
          }
        },
        {
          "name": "default_policy_program",
          "docs": [
            "The default policy program to be used for new smart wallets."
          ]
        },
        {
          "name": "system_program",
          "docs": ["The system program."],
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": []
    },
    {
      "name": "manage_vault",
      "docs": [
        "Manage SOL transfers in the vault system",
        "",
        "Handles SOL transfers to and from the LazorKit vault system, supporting",
        "multiple vault slots for efficient fee distribution and program operations."
      ],
      "discriminator": [165, 7, 106, 242, 73, 193, 195, 128],
      "accounts": [
        {
          "name": "authority",
          "docs": ["The current authority of the program."],
          "writable": true,
          "signer": true,
          "relations": ["config"]
        },
        {
          "name": "config",
          "docs": ["The program's configuration account."],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "vault",
          "docs": ["Individual vault PDA (empty account that holds SOL)"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  108, 97, 122, 111, 114, 107, 105, 116, 95, 118, 97, 117, 108,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "index"
              }
            ]
          }
        },
        {
          "name": "destination",
          "writable": true
        },
        {
          "name": "system_program",
          "docs": ["System program"],
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "action",
          "type": "u8"
        },
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "index",
          "type": "u8"
        }
      ]
    },
    {
      "name": "update_config",
      "docs": [
        "Update program configuration settings",
        "",
        "Allows the program authority to modify critical configuration parameters including",
        "fee structures, default policy programs, and operational settings. This function",
        "supports updating various configuration types through the UpdateType enum."
      ],
      "discriminator": [29, 158, 252, 191, 10, 83, 219, 99],
      "accounts": [
        {
          "name": "authority",
          "docs": ["The current authority of the program."],
          "writable": true,
          "signer": true,
          "relations": ["config"]
        },
        {
          "name": "config",
          "docs": ["The program's configuration account."],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "param",
          "type": {
            "defined": {
              "name": "UpdateType"
            }
          }
        },
        {
          "name": "value",
          "type": "u64"
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "Chunk",
      "discriminator": [134, 67, 80, 65, 135, 143, 156, 196]
    },
    {
      "name": "Config",
      "discriminator": [155, 12, 170, 224, 30, 250, 204, 130]
    },
    {
      "name": "Permission",
      "discriminator": [224, 83, 28, 79, 10, 253, 161, 28]
    },
    {
      "name": "PolicyProgramRegistry",
      "discriminator": [158, 67, 114, 157, 27, 153, 86, 72]
    },
    {
      "name": "SmartWalletConfig",
      "discriminator": [138, 211, 3, 80, 65, 100, 207, 142]
    },
    {
      "name": "WalletDevice",
      "discriminator": [35, 85, 31, 31, 179, 48, 136, 123]
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "PasskeyMismatch",
      "msg": "Passkey public key mismatch with stored authenticator"
    },
    {
      "code": 6001,
      "name": "SmartWalletConfigMismatch",
      "msg": "Smart wallet address mismatch with authenticator"
    },
    {
      "code": 6002,
      "name": "Secp256r1InvalidLength",
      "msg": "Secp256r1 instruction has invalid data length"
    },
    {
      "code": 6003,
      "name": "Secp256r1HeaderMismatch",
      "msg": "Secp256r1 instruction header validation failed"
    },
    {
      "code": 6004,
      "name": "Secp256r1DataMismatch",
      "msg": "Secp256r1 signature data validation failed"
    },
    {
      "code": 6005,
      "name": "InvalidSignature",
      "msg": "Invalid signature provided for passkey verification"
    },
    {
      "code": 6006,
      "name": "ClientDataInvalidUtf8",
      "msg": "Client data JSON is not valid UTF-8"
    },
    {
      "code": 6007,
      "name": "ClientDataJsonParseError",
      "msg": "Client data JSON parsing failed"
    },
    {
      "code": 6008,
      "name": "ChallengeMissing",
      "msg": "Challenge field missing from client data JSON"
    },
    {
      "code": 6009,
      "name": "ChallengeBase64DecodeError",
      "msg": "Challenge base64 decoding failed"
    },
    {
      "code": 6010,
      "name": "ChallengeDeserializationError",
      "msg": "Challenge message deserialization failed"
    },
    {
      "code": 6011,
      "name": "TimestampTooOld",
      "msg": "Message timestamp is too far in the past"
    },
    {
      "code": 6012,
      "name": "TimestampTooNew",
      "msg": "Message timestamp is too far in the future"
    },
    {
      "code": 6013,
      "name": "NonceMismatch",
      "msg": "Nonce mismatch: expected different value"
    },
    {
      "code": 6014,
      "name": "NonceOverflow",
      "msg": "Nonce overflow: cannot increment further"
    },
    {
      "code": 6015,
      "name": "PolicyProgramNotRegistered",
      "msg": "Policy program not found in registry"
    },
    {
      "code": 6016,
      "name": "WhitelistFull",
      "msg": "The policy program registry is full."
    },
    {
      "code": 6017,
      "name": "InvalidCheckPolicyDiscriminator",
      "msg": "Invalid instruction discriminator for check_policy"
    },
    {
      "code": 6018,
      "name": "InvalidDestroyDiscriminator",
      "msg": "Invalid instruction discriminator for destroy"
    },
    {
      "code": 6019,
      "name": "InvalidInitPolicyDiscriminator",
      "msg": "Invalid instruction discriminator for init_policy"
    },
    {
      "code": 6020,
      "name": "PolicyProgramsIdentical",
      "msg": "Old and new policy programs are identical"
    },
    {
      "code": 6021,
      "name": "NoDefaultPolicyProgram",
      "msg": "Neither old nor new policy program is the default"
    },
    {
      "code": 6022,
      "name": "PolicyProgramAlreadyRegistered",
      "msg": "Policy program already registered"
    },
    {
      "code": 6023,
      "name": "InvalidRemainingAccounts",
      "msg": "Invalid remaining accounts"
    },
    {
      "code": 6024,
      "name": "CpiDataMissing",
      "msg": "CPI data is required but not provided"
    },
    {
      "code": 6025,
      "name": "InsufficientPolicyAccounts",
      "msg": "Insufficient remaining accounts for policy instruction"
    },
    {
      "code": 6026,
      "name": "InsufficientCpiAccounts",
      "msg": "Insufficient remaining accounts for CPI instruction"
    },
    {
      "code": 6027,
      "name": "AccountSliceOutOfBounds",
      "msg": "Account slice index out of bounds"
    },
    {
      "code": 6028,
      "name": "TransferAmountOverflow",
      "msg": "Transfer amount would cause arithmetic overflow"
    },
    {
      "code": 6029,
      "name": "InvalidBumpSeed",
      "msg": "Invalid bump seed for PDA derivation"
    },
    {
      "code": 6030,
      "name": "InvalidAccountOwner",
      "msg": "Account owner verification failed"
    },
    {
      "code": 6031,
      "name": "ProgramNotExecutable",
      "msg": "Program not executable"
    },
    {
      "code": 6032,
      "name": "ProgramPaused",
      "msg": "Program is paused"
    },
    {
      "code": 6033,
      "name": "WalletDeviceAlreadyInitialized",
      "msg": "Wallet device already initialized"
    },
    {
      "code": 6034,
      "name": "CredentialIdTooLarge",
      "msg": "Credential ID exceeds maximum allowed size"
    },
    {
      "code": 6035,
      "name": "CredentialIdEmpty",
      "msg": "Credential ID cannot be empty"
    },
    {
      "code": 6036,
      "name": "PolicyDataTooLarge",
      "msg": "Policy data exceeds maximum allowed size"
    },
    {
      "code": 6037,
      "name": "CpiDataTooLarge",
      "msg": "CPI data exceeds maximum allowed size"
    },
    {
      "code": 6038,
      "name": "TooManyRemainingAccounts",
      "msg": "Too many remaining accounts provided"
    },
    {
      "code": 6039,
      "name": "InvalidPDADerivation",
      "msg": "Invalid PDA derivation"
    },
    {
      "code": 6040,
      "name": "TransactionTooOld",
      "msg": "Transaction is too old"
    },
    {
      "code": 6041,
      "name": "InvalidAccountData",
      "msg": "Invalid account data"
    },
    {
      "code": 6042,
      "name": "InvalidInstructionData",
      "msg": "Invalid instruction data"
    },
    {
      "code": 6043,
      "name": "AccountAlreadyInitialized",
      "msg": "Account already initialized"
    },
    {
      "code": 6044,
      "name": "InvalidAccountState",
      "msg": "Invalid account state"
    },
    {
      "code": 6045,
      "name": "InvalidFeeAmount",
      "msg": "Invalid fee amount"
    },
    {
      "code": 6046,
      "name": "InsufficientBalanceForFee",
      "msg": "Insufficient balance for fee"
    },
    {
      "code": 6047,
      "name": "InvalidAuthority",
      "msg": "Invalid authority"
    },
    {
      "code": 6048,
      "name": "AuthorityMismatch",
      "msg": "Authority mismatch"
    },
    {
      "code": 6049,
      "name": "InvalidSequenceNumber",
      "msg": "Invalid sequence number"
    },
    {
      "code": 6050,
      "name": "InvalidPasskeyFormat",
      "msg": "Invalid passkey format"
    },
    {
      "code": 6051,
      "name": "InvalidMessageFormat",
      "msg": "Invalid message format"
    },
    {
      "code": 6052,
      "name": "InvalidSplitIndex",
      "msg": "Invalid split index"
    },
    {
      "code": 6053,
      "name": "InvalidProgramAddress",
      "msg": "Invalid program address"
    },
    {
      "code": 6054,
      "name": "ReentrancyDetected",
      "msg": "Reentrancy detected"
    },
    {
      "code": 6055,
      "name": "InvalidVaultIndex",
      "msg": "Invalid vault index"
    },
    {
      "code": 6056,
      "name": "InsufficientBalance",
      "msg": "Insufficient balance"
    },
    {
      "code": 6057,
      "name": "InvalidAction",
      "msg": "Invalid action"
    },
    {
      "code": 6058,
      "name": "InsufficientVaultBalance",
      "msg": "Insufficient balance in vault"
    }
  ],
  "types": [
    {
      "name": "CallPolicyArgs",
      "docs": [
        "Arguments for calling policy program instructions",
        "",
        "Contains WebAuthn authentication data and policy program parameters",
        "required for executing policy program instructions like adding/removing devices."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "passkey_public_key",
            "docs": ["Public key of the WebAuthn passkey for authentication"],
            "type": {
              "array": ["u8", 33]
            }
          },
          {
            "name": "signature",
            "docs": ["WebAuthn signature for transaction authorization"],
            "type": "bytes"
          },
          {
            "name": "client_data_json_raw",
            "docs": ["Raw client data JSON from WebAuthn authentication"],
            "type": "bytes"
          },
          {
            "name": "authenticator_data_raw",
            "docs": ["Raw authenticator data from WebAuthn authentication"],
            "type": "bytes"
          },
          {
            "name": "verify_instruction_index",
            "docs": ["Index of the Secp256r1 verification instruction"],
            "type": "u8"
          },
          {
            "name": "policy_data",
            "docs": ["Policy program instruction data"],
            "type": "bytes"
          },
          {
            "name": "new_wallet_device",
            "docs": ["Optional new wallet device to add during policy call"],
            "type": {
              "option": {
                "defined": {
                  "name": "NewWalletDeviceArgs"
                }
              }
            }
          },
          {
            "name": "vault_index",
            "docs": [
              "Random vault index (0-31) calculated off-chain for fee distribution"
            ],
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "ChangePolicyArgs",
      "docs": [
        "Arguments for changing a smart wallet's policy program",
        "",
        "Contains WebAuthn authentication data and policy program parameters",
        "required for securely changing the policy program governing a wallet."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "passkey_public_key",
            "docs": ["Public key of the WebAuthn passkey for authentication"],
            "type": {
              "array": ["u8", 33]
            }
          },
          {
            "name": "signature",
            "docs": ["WebAuthn signature for transaction authorization"],
            "type": "bytes"
          },
          {
            "name": "client_data_json_raw",
            "docs": ["Raw client data JSON from WebAuthn authentication"],
            "type": "bytes"
          },
          {
            "name": "authenticator_data_raw",
            "docs": ["Raw authenticator data from WebAuthn authentication"],
            "type": "bytes"
          },
          {
            "name": "verify_instruction_index",
            "docs": ["Index of the Secp256r1 verification instruction"],
            "type": "u8"
          },
          {
            "name": "split_index",
            "docs": [
              "Index for splitting remaining accounts between policy and CPI"
            ],
            "type": "u16"
          },
          {
            "name": "destroy_policy_data",
            "docs": ["Data for destroying the old policy program"],
            "type": "bytes"
          },
          {
            "name": "init_policy_data",
            "docs": ["Data for initializing the new policy program"],
            "type": "bytes"
          },
          {
            "name": "new_wallet_device",
            "docs": ["Optional new wallet device to add during policy change"],
            "type": {
              "option": {
                "defined": {
                  "name": "NewWalletDeviceArgs"
                }
              }
            }
          },
          {
            "name": "vault_index",
            "docs": [
              "Random vault index (0-31) calculated off-chain for fee distribution"
            ],
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "Chunk",
      "docs": [
        "Transaction chunk for deferred execution",
        "",
        "Created after full passkey and policy verification. Contains all bindings",
        "necessary to execute the transaction later without re-verification.",
        "Used for large transactions that need to be split into manageable chunks."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "owner_wallet_address",
            "docs": ["Smart wallet address that authorized this chunk session"],
            "type": "pubkey"
          },
          {
            "name": "instruction_data_hash",
            "docs": [
              "Combined SHA256 hash of all transaction instruction data"
            ],
            "type": {
              "array": ["u8", 32]
            }
          },
          {
            "name": "accounts_metadata_hash",
            "docs": [
              "Combined SHA256 hash over all ordered remaining account metas plus target programs"
            ],
            "type": {
              "array": ["u8", 32]
            }
          },
          {
            "name": "authorized_nonce",
            "docs": [
              "The nonce that was authorized at chunk creation (bound into data hash)"
            ],
            "type": "u64"
          },
          {
            "name": "expires_at",
            "docs": ["Unix timestamp when this chunk expires"],
            "type": "i64"
          },
          {
            "name": "rent_refund_address",
            "docs": [
              "Address to receive rent refund when closing the chunk session"
            ],
            "type": "pubkey"
          },
          {
            "name": "vault_index",
            "docs": ["Vault index for fee collection during chunk execution"],
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "Config",
      "docs": [
        "LazorKit program configuration and settings",
        "",
        "Stores global program configuration including fee structures, default policy",
        "program, and operational settings. Only the program authority can modify",
        "these settings through the update_config instruction."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "docs": [
              "Program authority that can modify configuration settings"
            ],
            "type": "pubkey"
          },
          {
            "name": "create_smart_wallet_fee",
            "docs": [
              "Fee charged for creating a new smart wallet (in lamports)"
            ],
            "type": "u64"
          },
          {
            "name": "fee_payer_fee",
            "docs": [
              "Fee charged to the fee payer for transactions (in lamports)"
            ],
            "type": "u64"
          },
          {
            "name": "referral_fee",
            "docs": ["Fee paid to referral addresses (in lamports)"],
            "type": "u64"
          },
          {
            "name": "lazorkit_fee",
            "docs": ["Fee retained by LazorKit protocol (in lamports)"],
            "type": "u64"
          },
          {
            "name": "default_policy_program_id",
            "docs": ["Default policy program ID for new smart wallets"],
            "type": "pubkey"
          },
          {
            "name": "is_paused",
            "docs": ["Whether the program is currently paused"],
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "CreateChunkArgs",
      "docs": [
        "Arguments for creating a chunk buffer for large transactions",
        "",
        "Contains WebAuthn authentication data and parameters required for",
        "creating chunk buffers when transactions exceed size limits."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "passkey_public_key",
            "docs": ["Public key of the WebAuthn passkey for authentication"],
            "type": {
              "array": ["u8", 33]
            }
          },
          {
            "name": "signature",
            "docs": ["WebAuthn signature for transaction authorization"],
            "type": "bytes"
          },
          {
            "name": "client_data_json_raw",
            "docs": ["Raw client data JSON from WebAuthn authentication"],
            "type": "bytes"
          },
          {
            "name": "authenticator_data_raw",
            "docs": ["Raw authenticator data from WebAuthn authentication"],
            "type": "bytes"
          },
          {
            "name": "verify_instruction_index",
            "docs": ["Index of the Secp256r1 verification instruction"],
            "type": "u8"
          },
          {
            "name": "policy_data",
            "docs": ["Policy program instruction data"],
            "type": "bytes"
          },
          {
            "name": "expires_at",
            "docs": ["Unix timestamp when the chunk expires"],
            "type": "i64"
          },
          {
            "name": "vault_index",
            "docs": [
              "Random vault index (0-31) calculated off-chain for fee distribution"
            ],
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "CreateSmartWalletArgs",
      "docs": [
        "Arguments for creating a new smart wallet",
        "",
        "Contains all necessary parameters for initializing a new smart wallet",
        "with WebAuthn passkey authentication and policy program configuration."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "passkey_public_key",
            "docs": ["Public key of the WebAuthn passkey for authentication"],
            "type": {
              "array": ["u8", 33]
            }
          },
          {
            "name": "credential_id",
            "docs": ["Unique credential ID from WebAuthn registration"],
            "type": "bytes"
          },
          {
            "name": "policy_data",
            "docs": ["Policy program initialization data"],
            "type": "bytes"
          },
          {
            "name": "wallet_id",
            "docs": ["Random wallet ID provided by client for uniqueness"],
            "type": "u64"
          },
          {
            "name": "amount",
            "docs": ["Initial SOL amount to transfer to the wallet"],
            "type": "u64"
          },
          {
            "name": "referral_address",
            "docs": ["Optional referral address for fee sharing"],
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "vault_index",
            "docs": [
              "Random vault index (0-31) calculated off-chain for fee distribution"
            ],
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "ExecuteArgs",
      "docs": [
        "Arguments for executing a transaction through the smart wallet",
        "",
        "Contains WebAuthn authentication data and transaction parameters",
        "required for secure transaction execution with policy validation."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "passkey_public_key",
            "docs": ["Public key of the WebAuthn passkey for authentication"],
            "type": {
              "array": ["u8", 33]
            }
          },
          {
            "name": "signature",
            "docs": ["WebAuthn signature for transaction authorization"],
            "type": "bytes"
          },
          {
            "name": "client_data_json_raw",
            "docs": ["Raw client data JSON from WebAuthn authentication"],
            "type": "bytes"
          },
          {
            "name": "authenticator_data_raw",
            "docs": ["Raw authenticator data from WebAuthn authentication"],
            "type": "bytes"
          },
          {
            "name": "verify_instruction_index",
            "docs": ["Index of the Secp256r1 verification instruction"],
            "type": "u8"
          },
          {
            "name": "split_index",
            "docs": [
              "Index for splitting remaining accounts between policy and CPI"
            ],
            "type": "u16"
          },
          {
            "name": "policy_data",
            "docs": ["Policy program instruction data"],
            "type": "bytes"
          },
          {
            "name": "cpi_data",
            "docs": ["Cross-program invocation instruction data"],
            "type": "bytes"
          },
          {
            "name": "vault_index",
            "docs": [
              "Random vault index (0-31) calculated off-chain for fee distribution"
            ],
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "GrantPermissionArgs",
      "docs": [
        "Arguments for granting ephemeral permission to a keypair",
        "",
        "Contains WebAuthn authentication data and parameters required for",
        "granting time-limited permission to an ephemeral keypair for",
        "multiple operations without repeated passkey authentication."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "passkey_public_key",
            "docs": ["Public key of the WebAuthn passkey for authentication"],
            "type": {
              "array": ["u8", 33]
            }
          },
          {
            "name": "signature",
            "docs": ["WebAuthn signature for transaction authorization"],
            "type": "bytes"
          },
          {
            "name": "client_data_json_raw",
            "docs": ["Raw client data JSON from WebAuthn authentication"],
            "type": "bytes"
          },
          {
            "name": "authenticator_data_raw",
            "docs": ["Raw authenticator data from WebAuthn authentication"],
            "type": "bytes"
          },
          {
            "name": "verify_instruction_index",
            "docs": ["Index of the Secp256r1 verification instruction"],
            "type": "u8"
          },
          {
            "name": "ephemeral_public_key",
            "docs": ["Ephemeral public key that will receive permission"],
            "type": "pubkey"
          },
          {
            "name": "expires_at",
            "docs": ["Unix timestamp when the permission expires"],
            "type": "i64"
          },
          {
            "name": "vault_index",
            "docs": [
              "Random vault index (0-31) calculated off-chain for fee distribution"
            ],
            "type": "u8"
          },
          {
            "name": "instruction_data_list",
            "docs": ["All instruction data to be authorized for execution"],
            "type": {
              "vec": "bytes"
            }
          },
          {
            "name": "split_index",
            "docs": ["Split indices for accounts (n-1 for n instructions)"],
            "type": "bytes"
          }
        ]
      }
    },
    {
      "name": "NewWalletDeviceArgs",
      "docs": [
        "Arguments for adding a new wallet device (passkey)",
        "",
        "Contains the necessary data for adding a new WebAuthn passkey",
        "to an existing smart wallet for enhanced security and convenience."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "passkey_public_key",
            "docs": ["Public key of the new WebAuthn passkey"],
            "type": {
              "array": ["u8", 33]
            }
          },
          {
            "name": "credential_id",
            "docs": [
              "Unique credential ID from WebAuthn registration (max 256 bytes)"
            ],
            "type": "bytes"
          }
        ]
      }
    },
    {
      "name": "Permission",
      "docs": [
        "Ephemeral authorization for temporary program access",
        "",
        "Created after passkey authentication to allow execution with an ephemeral key",
        "for a limited time. Enables multiple operations without repeated passkey",
        "authentication, ideal for games and applications requiring frequent interactions."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "owner_wallet_address",
            "docs": [
              "Smart wallet address that authorized this permission session"
            ],
            "type": "pubkey"
          },
          {
            "name": "ephemeral_public_key",
            "docs": [
              "Ephemeral public key that can sign transactions during this session"
            ],
            "type": "pubkey"
          },
          {
            "name": "expires_at",
            "docs": ["Unix timestamp when this permission session expires"],
            "type": "i64"
          },
          {
            "name": "fee_payer_address",
            "docs": ["Fee payer address for transactions in this session"],
            "type": "pubkey"
          },
          {
            "name": "rent_refund_address",
            "docs": ["Address to receive rent refund when closing the session"],
            "type": "pubkey"
          },
          {
            "name": "vault_index",
            "docs": ["Vault index for fee collection during this session"],
            "type": "u8"
          },
          {
            "name": "instruction_data_hash",
            "docs": [
              "Combined hash of all instruction data that can be executed"
            ],
            "type": {
              "array": ["u8", 32]
            }
          },
          {
            "name": "accounts_metadata_hash",
            "docs": [
              "Combined hash of all accounts that will be used in this session"
            ],
            "type": {
              "array": ["u8", 32]
            }
          }
        ]
      }
    },
    {
      "name": "PolicyProgramRegistry",
      "docs": [
        "Registry of approved policy programs for smart wallet operations",
        "",
        "Maintains a whitelist of policy programs that can be used to govern",
        "smart wallet transaction validation and security rules."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "registered_programs",
            "docs": ["List of registered policy program addresses (max 10)"],
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "name": "bump",
            "docs": ["Bump seed for PDA derivation and verification"],
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "SmartWalletConfig",
      "docs": [
        "Core data account for a LazorKit smart wallet",
        "",
        "Stores the essential state information for a smart wallet including its",
        "unique identifier, policy program configuration, and authentication nonce",
        "for replay attack prevention."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "wallet_id",
            "docs": ["Unique identifier for this smart wallet instance"],
            "type": "u64"
          },
          {
            "name": "referral_address",
            "docs": [
              "Referral address that receives referral fees from this wallet"
            ],
            "type": "pubkey"
          },
          {
            "name": "policy_program_id",
            "docs": [
              "Policy program that governs this wallet's transaction validation rules"
            ],
            "type": "pubkey"
          },
          {
            "name": "last_nonce",
            "docs": [
              "Last nonce used for message verification to prevent replay attacks"
            ],
            "type": "u64"
          },
          {
            "name": "bump",
            "docs": ["Bump seed for PDA derivation and verification"],
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "UpdateType",
      "docs": [
        "Types of configuration parameters that can be updated",
        "",
        "Defines all the configuration parameters that can be modified through",
        "the update_config instruction by the program authority."
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "CreateWalletFee"
          },
          {
            "name": "FeePayerFee"
          },
          {
            "name": "ReferralFee"
          },
          {
            "name": "LazorkitFee"
          },
          {
            "name": "DefaultPolicyProgram"
          },
          {
            "name": "Admin"
          },
          {
            "name": "PauseProgram"
          },
          {
            "name": "UnpauseProgram"
          }
        ]
      }
    },
    {
      "name": "WalletDevice",
      "docs": [
        "Account that stores a wallet device (passkey) for smart wallet authentication",
        "",
        "Each wallet device represents a WebAuthn passkey that can be used to authenticate",
        "transactions for a specific smart wallet. Multiple devices can be associated with",
        "a single smart wallet for enhanced security and convenience."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "passkey_public_key",
            "docs": [
              "Public key of the WebAuthn passkey for transaction authorization"
            ],
            "type": {
              "array": ["u8", 33]
            }
          },
          {
            "name": "smart_wallet_address",
            "docs": ["Smart wallet address this device is associated with"],
            "type": "pubkey"
          },
          {
            "name": "credential_id",
            "docs": ["Unique credential ID from WebAuthn registration"],
            "type": "bytes"
          },
          {
            "name": "bump",
            "docs": ["Bump seed for PDA derivation and verification"],
            "type": "u8"
          }
        ]
      }
    }
  ]
}
